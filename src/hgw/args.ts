/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* command := cmd=weakenCmd $
* _ := '\s*'
* bool := literal = {'true' | 'false'}
*         .value = boolean { return this.literal === 'true'; }
* num := literal='[0-9]+'
*         .value = number { return parseInt(this.literal); }
* threadsFlag := {'--threads' | '-t'} _ threads=num
* infiniteFlag := {'--infinite' | '-i'} infinite=''
* weakenFlag := threadsFlag | infiniteFlag
* weakenCmd := 'w' flags={_ flag=weakenFlag}*
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    command = "command",
    _ = "_",
    bool = "bool",
    bool_$0_1 = "bool_$0_1",
    bool_$0_2 = "bool_$0_2",
    num = "num",
    threadsFlag = "threadsFlag",
    threadsFlag_$0_1 = "threadsFlag_$0_1",
    threadsFlag_$0_2 = "threadsFlag_$0_2",
    infiniteFlag = "infiniteFlag",
    infiniteFlag_$0_1 = "infiniteFlag_$0_1",
    infiniteFlag_$0_2 = "infiniteFlag_$0_2",
    weakenFlag_1 = "weakenFlag_1",
    weakenFlag_2 = "weakenFlag_2",
    weakenCmd = "weakenCmd",
    weakenCmd_$0 = "weakenCmd_$0",
    $EOF = "$EOF",
}
export interface command {
    kind: ASTKinds.command;
    cmd: weakenCmd;
}
export type _ = string;
export class bool {
    public kind: ASTKinds.bool = ASTKinds.bool;
    public literal: bool_$0;
    public value: boolean;
    constructor(literal: bool_$0){
        this.literal = literal;
        this.value = ((): boolean => {
        return this.literal === 'true';
        })();
    }
}
export type bool_$0 = bool_$0_1 | bool_$0_2;
export type bool_$0_1 = string;
export type bool_$0_2 = string;
export class num {
    public kind: ASTKinds.num = ASTKinds.num;
    public literal: string;
    public value: number;
    constructor(literal: string){
        this.literal = literal;
        this.value = ((): number => {
        return parseInt(this.literal);
        })();
    }
}
export interface threadsFlag {
    kind: ASTKinds.threadsFlag;
    threads: num;
}
export type threadsFlag_$0 = threadsFlag_$0_1 | threadsFlag_$0_2;
export type threadsFlag_$0_1 = string;
export type threadsFlag_$0_2 = string;
export interface infiniteFlag {
    kind: ASTKinds.infiniteFlag;
    infinite: string;
}
export type infiniteFlag_$0 = infiniteFlag_$0_1 | infiniteFlag_$0_2;
export type infiniteFlag_$0_1 = string;
export type infiniteFlag_$0_2 = string;
export type weakenFlag = weakenFlag_1 | weakenFlag_2;
export type weakenFlag_1 = threadsFlag;
export type weakenFlag_2 = infiniteFlag;
export interface weakenCmd {
    kind: ASTKinds.weakenCmd;
    flags: weakenCmd_$0[];
}
export interface weakenCmd_$0 {
    kind: ASTKinds.weakenCmd_$0;
    flag: weakenFlag;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchcommand($$dpth: number, $$cr?: ErrorTracker): Nullable<command> {
        return this.run<command>($$dpth,
            () => {
                let $scope$cmd: Nullable<weakenCmd>;
                let $$res: Nullable<command> = null;
                if (true
                    && ($scope$cmd = this.matchweakenCmd($$dpth + 1, $$cr)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.command, cmd: $scope$cmd};
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr);
    }
    public matchbool($$dpth: number, $$cr?: ErrorTracker): Nullable<bool> {
        return this.run<bool>($$dpth,
            () => {
                let $scope$literal: Nullable<bool_$0>;
                let $$res: Nullable<bool> = null;
                if (true
                    && ($scope$literal = this.matchbool_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new bool($scope$literal);
                }
                return $$res;
            });
    }
    public matchbool_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<bool_$0> {
        return this.choice<bool_$0>([
            () => this.matchbool_$0_1($$dpth + 1, $$cr),
            () => this.matchbool_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchbool_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bool_$0_1> {
        return this.regexAccept(String.raw`(?:true)`, $$dpth + 1, $$cr);
    }
    public matchbool_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bool_$0_2> {
        return this.regexAccept(String.raw`(?:false)`, $$dpth + 1, $$cr);
    }
    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
        return this.run<num>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<num> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new num($scope$literal);
                }
                return $$res;
            });
    }
    public matchthreadsFlag($$dpth: number, $$cr?: ErrorTracker): Nullable<threadsFlag> {
        return this.run<threadsFlag>($$dpth,
            () => {
                let $scope$threads: Nullable<num>;
                let $$res: Nullable<threadsFlag> = null;
                if (true
                    && this.matchthreadsFlag_$0($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$threads = this.matchnum($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.threadsFlag, threads: $scope$threads};
                }
                return $$res;
            });
    }
    public matchthreadsFlag_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<threadsFlag_$0> {
        return this.choice<threadsFlag_$0>([
            () => this.matchthreadsFlag_$0_1($$dpth + 1, $$cr),
            () => this.matchthreadsFlag_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchthreadsFlag_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<threadsFlag_$0_1> {
        return this.regexAccept(String.raw`(?:--threads)`, $$dpth + 1, $$cr);
    }
    public matchthreadsFlag_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<threadsFlag_$0_2> {
        return this.regexAccept(String.raw`(?:-t)`, $$dpth + 1, $$cr);
    }
    public matchinfiniteFlag($$dpth: number, $$cr?: ErrorTracker): Nullable<infiniteFlag> {
        return this.run<infiniteFlag>($$dpth,
            () => {
                let $scope$infinite: Nullable<string>;
                let $$res: Nullable<infiniteFlag> = null;
                if (true
                    && this.matchinfiniteFlag_$0($$dpth + 1, $$cr) !== null
                    && ($scope$infinite = this.regexAccept(String.raw`(?:)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.infiniteFlag, infinite: $scope$infinite};
                }
                return $$res;
            });
    }
    public matchinfiniteFlag_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<infiniteFlag_$0> {
        return this.choice<infiniteFlag_$0>([
            () => this.matchinfiniteFlag_$0_1($$dpth + 1, $$cr),
            () => this.matchinfiniteFlag_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchinfiniteFlag_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<infiniteFlag_$0_1> {
        return this.regexAccept(String.raw`(?:--infinite)`, $$dpth + 1, $$cr);
    }
    public matchinfiniteFlag_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<infiniteFlag_$0_2> {
        return this.regexAccept(String.raw`(?:-i)`, $$dpth + 1, $$cr);
    }
    public matchweakenFlag($$dpth: number, $$cr?: ErrorTracker): Nullable<weakenFlag> {
        return this.choice<weakenFlag>([
            () => this.matchweakenFlag_1($$dpth + 1, $$cr),
            () => this.matchweakenFlag_2($$dpth + 1, $$cr),
        ]);
    }
    public matchweakenFlag_1($$dpth: number, $$cr?: ErrorTracker): Nullable<weakenFlag_1> {
        return this.matchthreadsFlag($$dpth + 1, $$cr);
    }
    public matchweakenFlag_2($$dpth: number, $$cr?: ErrorTracker): Nullable<weakenFlag_2> {
        return this.matchinfiniteFlag($$dpth + 1, $$cr);
    }
    public matchweakenCmd($$dpth: number, $$cr?: ErrorTracker): Nullable<weakenCmd> {
        return this.run<weakenCmd>($$dpth,
            () => {
                let $scope$flags: Nullable<weakenCmd_$0[]>;
                let $$res: Nullable<weakenCmd> = null;
                if (true
                    && this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr) !== null
                    && ($scope$flags = this.loop<weakenCmd_$0>(() => this.matchweakenCmd_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.weakenCmd, flags: $scope$flags};
                }
                return $$res;
            });
    }
    public matchweakenCmd_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<weakenCmd_$0> {
        return this.run<weakenCmd_$0>($$dpth,
            () => {
                let $scope$flag: Nullable<weakenFlag>;
                let $$res: Nullable<weakenCmd_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$flag = this.matchweakenFlag($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.weakenCmd_$0, flag: $scope$flag};
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchcommand(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchcommand(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchcommand(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<command>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}